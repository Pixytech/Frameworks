using System;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using Graphnet.Dashboard.CoreUI.Models;
using Graphnet.Dashboard.WebContracts.Dataflow;
using Graphnet.Dashboard.Wpf.Presentation.Infrastructure.Dataflow;
using Graphnet.Core.IoC;
using Graphnet.Wpf.Presentation.Infrastructure.Services.Interfaces;
using Graphnet.Dashboard.Wpf.Presentation.Infrastructure.ExceptionManagement;
using Graphnet.Core.Utilities;
using Graphnet.Dashboard.WebContracts;

namespace Graphnet.Dashboard.CoreUI.ViewModels.Dataflow.Editors.Ruleset
{
    internal class RuleSetEditorVm : MiddlewareEditor
    {
        private readonly IBuilder _builder;
        private readonly ISafeExecutor _safeExecutor;
        private readonly IMessageBoxService _messageBoxService;
        private readonly IWebComponentService _webComponentService;

        public Type MiddlewareOptionType { get; set; }

        public RuleSetEditorVm(IBuilder builder, ISafeExecutor safeExecutor, IMessageBoxService messageBoxService, IWebComponentService webComponentService)
        {
            _builder = builder;
            _safeExecutor = safeExecutor;
            _messageBoxService = messageBoxService;
            _webComponentService = webComponentService;

        }

        [Required(AllowEmptyStrings = false, ErrorMessage = "Rule context is required")]
        public MessageMetadataModel MessageType
        {
            get { return GetProperty<MessageMetadataModel>(); }
            set
            {
                if (ConfirmMessageTypeChange(value))
                {
                    SetProperty(value);
                    var messageType = value.Metadata.MessageType;
                    var ruleOptionType = typeof (RuleOptionVm<>).MakeGenericType(messageType);
                    ObjectFactory.Configure(c => c.ConfigureType(ruleOptionType, ObjectLifecycle.InstancePerCall));
                    var options = _builder.Build(ruleOptionType) as IRuleOptionsVm;

                    if (options == null)
                    {
                        throw new InvalidCastException("Unable to create instance of RuleOptionsVm");
                    }

                    options.RequestValidationAction = RequestValidationAction;

                    options.VariableProvider = VariableProvider;

                    if (Context.MiddlewareOption == null)
                    {
                        Context.MiddlewareOption = options.MiddlewareOption;
                    }
                    else
                    {
                        if (options.MiddlewareOption.GetType().IsAssignableFrom(Context.MiddlewareOptionType))
                        {
                            options.MiddlewareOption = Context.MiddlewareOption;
                        }
                        else
                        {
                            Context.MiddlewareOption = options.MiddlewareOption;
                        }

                    }

                    RuleOptions = options;
                    Task.Run(async () => { await options.InitializeVm(); }).Wait();
                }
            }
        }

        private bool ConfirmMessageTypeChange(MessageMetadataModel messageType)
        {
            if (RuleOptions != null)
            {
                if (!RuleOptions.MiddlewareOption.GetType().GetGenericArguments().First().IsAssignableFrom(messageType.Metadata.MessageType) && RuleOptions.HasData)
                {
                    if (
                        _messageBoxService.Show(this,
                            "You are about to change the message type, This will reset the conditions and actions.",
                            "Confirm Action ?", MessageBoxButton.OKCancel, MessageBoxImage.Question) ==
                        MessageBoxResult.Cancel)
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        public IRuleOptionsVm RuleOptions
        {
            get { return GetProperty<IRuleOptionsVm>(); }
            set
            {
                SetProperty(value);
                OnPropertyChanged(() => AllowEdits);
            }
        }

        public bool AllowEdits
        {
            get { return RuleOptions != null; }
        }

        protected override void OnInitializeEditor()
        {
            AsyncHelpers.RunSync(() => _safeExecutor.TryAsync(async () =>
            {
                var messages = await _webComponentService.GetDataflowMessagesAsync();
                MessageTypes = new ObservableCollection<MessageMetadataModel>(messages.ToModel());

            }).ExecuteAsync());


            if (Context.MiddlewareOption != null)
            {
                var messageType = Context.MiddlewareOptionType.GetGenericArguments().FirstOrDefault();
                MessageType = MessageTypes.FirstOrDefault(x => x.Metadata.MessageType.IsAssignableFrom(messageType)) ??
                              MessageTypes.FirstOrDefault();
            }
        }

        protected override bool OnEditorValidate()
        {
            var selfValidate = base.OnEditorValidate();
            var childValidate = RuleOptions != null && RuleOptions.Validate();
            return selfValidate && childValidate;
        }
        
        public ObservableCollection<MessageMetadataModel> MessageTypes
        {
            get { return GetProperty<ObservableCollection<MessageMetadataModel>>(); }
            set
            {
                SetProperty(value);
            }
        }

        protected override IMiddlewareOptionBase OnGetMiddlewareOption()
        {
            return RuleOptions.MiddlewareOption;
        }

        
    }
}
